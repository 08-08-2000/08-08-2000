import java.util.*;

public class ArticulationPoint {

    static class Graph{
        int vertices;
        LinkedList<Integer> adjList [];

        public Graph(int vertices){
            this.vertices = vertices;
            adjList = new LinkedList[vertices];
            for (int i = 0; i <vertices ; i++) {
                adjList[i] = new LinkedList<>();
            }
        }

        public void addEdge(int source, int destination){
            //forward edge
            adjList[source].addFirst(destination);
            //backward edge in undirected graph
            adjList[destination].addFirst(source);
        }
    }

    int time=0;
    ArrayList<Integer> articulationResult = new ArrayList<>();

    public void findArticulationPoints(Graph graph){

        int vertices = graph.vertices;

        Map<Integer, Integer> visitTime = new HashMap<>();
        Map<Integer, Integer> lowTime = new HashMap<>();
        Map<Integer, Integer> parent = new HashMap<>();
        //created visited array
        boolean[] visited = new boolean[vertices];

        //this loop will handle disconnected graphs as well
        for (int i = 0; i <vertices ; i++) {
            if(!visited[i])
                DFS(graph, i, visitTime, lowTime, visited, parent);
        }

        if(articulationResult.size()>0) {
            System.out.println("Articulation Points are: " +  Arrays.toString(articulationResult.toArray()));
        }else{
            System.out.println("No Articulation Points in the given graph");
        }

    }

    public void DFS(Graph graph, int currentVertex, Map<Integer, Integer> discoveryTime, Map<Integer, Integer> lowTime, boolean[] visited, Map<Integer, Integer> parent){

        LinkedList<Integer> adjList [] = graph.adjList;
        int childCount = 0;
        boolean canArticulationPoint = false;
        visited[currentVertex] = true;
        discoveryTime.put(currentVertex, time);
        lowTime.put(currentVertex, time);
        time++;
        for (int i = 0; i <adjList[currentVertex].size() ; i++) {
            int adjacentVertex = adjList[currentVertex].get(i);

            if(!visited[adjacentVertex]){
                //make current vertex as parent of adjacent vertex
                // and increase the child count for current vertex
                parent.put(adjacentVertex, currentVertex);
                childCount++;
                //make recursive call for the adjacent vertex
                DFS(graph, adjacentVertex, discoveryTime, lowTime, visited, parent);

                //check for articulation point
                if(discoveryTime.get(currentVertex)<=lowTime.get(adjacentVertex)){
                    canArticulationPoint = true;
                } else{
                    //check the low point is adjacent vertex is less than current vertex,
                    //if yes then update the current vertex low point
                    int currLowTime = lowTime.get(currentVertex);
                    lowTime.put(currentVertex, Math.min(currLowTime, lowTime.get(adjacentVertex)));
                }
            }else{
                //if here means the vertex was visited earlier,
                //certainly there is a back edge,
                // update the low time of current vertex with visited time of adjacent vertex if needed
                int currLowTime = lowTime.get(currentVertex);
                lowTime.put(currentVertex, Math.min(currLowTime, discoveryTime.get(adjacentVertex)));
            }
        }
        //after visiting all the adjacent vertices check if current vertex is articulation point
        if((parent.get(currentVertex)==null && childCount>1)||(parent.get(currentVertex)!=null && canArticulationPoint)){
            //current vertex is AP, add it to the list
            articulationResult.add(currentVertex);
        }
    }

    static int parsUserInput(String input) {
    System.out.println("Next: " + input);
    int parsedUserInput = 0;
    try {
             parsedUserInput = Integer.parseInt(input);
         } catch (Exception e) {
             System.out.println("Input should be a number");
             Scanner myObj = new Scanner(System.in);
             String vertices = myObj.nextLine();
             
             return parsUserInput(vertices);
         }
         return parsedUserInput;
  }
  
  static int[] parsUserInput2(String input) {
    System.out.println("Next: " + input);
    int[] parsedUserInput = {0, 0};
    String[] splitStr = input.split("\\s+");
    try {
         parsedUserInput[0] = Integer.parseInt(splitStr[0]);
    
    parsedUserInput[1] = Integer.parseInt(splitStr[1]);
    } catch (Exception e) {
        System.out.println("Pass edges in the following format: int space int");
        System.out.println("Example: 0 1");
        Scanner myObj = new Scanner(System.in);
             String edges = myObj.nextLine();
             
             return parsUserInput2(edges); 
    }
   
    return parsedUserInput;
  }


    public static void main(String[] args) {
         Scanner myObj = new Scanner(System.in);
         System.out.println("Pass number of vertices");
         
         String vertices = myObj.nextLine();
         
         int verticesCount = parsUserInput(vertices);
         
         System.out.println("Pass number of edges");
         
         String edgesInput = myObj.nextLine();
         
         int edgesCount = parsUserInput(edgesInput);
         
        
        Graph graph = new Graph(verticesCount);
        System.out.println("Pass edges in the following format: int space int");
        System.out.println("Example: 0 1");
        for (int i = 0; i < edgesCount; i++) { String edges = myObj.nextLine();
        int[] edgesArray = parsUserInput2(edges);
        graph.addEdge(edgesArray[0], edgesArray[1]);
        }
        

        ArticulationPoint ap = new ArticulationPoint();
        ap.findArticulationPoints(graph);
    }
}
